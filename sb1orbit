#!/usr/bin/env python

import argparse
import math
import sys

import numpy
import emcee

import eb

import matplotlib

from nlfit import *
from sb1 import *

import fussyastronomer

# Figure size.
figsize = (8.0, 6.0)  # inches

# Deal with command-line arguments.
ap = argparse.ArgumentParser()
ap.add_argument("pset", help="parameter file")
ap.add_argument("vels", help="velocities")
ap.add_argument("-2", action="store_true", dest="double", help="read and plot second star from TODCOR file")
ap.add_argument("-b", type=int, help="set number of burn-in samples")
ap.add_argument("-e", action="store_true", help="input file has errors in 3rd column")
ap.add_argument("-m", help="run MCMC storing output to file M")
ap.add_argument("-n", type=int, help="set number of MCMC samples to N")
ap.add_argument("-t", action="store_true", help="integrate model over exposure time")
ap.add_argument("-u", action="store_true", help="plot unfolded phase")
ap.add_argument("-w", type=int, help="set number of walkers")

if len(sys.argv) == 1:
  ap.print_help(sys.stderr)
  sys.exit(1)

args = ap.parse_args()

# Type 42 fonts needed for publication.
matplotlib.rcParams["pdf.fonttype"] = 42
matplotlib.rcParams["ps.fonttype"] = 42
matplotlib.rcParams["figure.subplot.left"] = 0.15
matplotlib.rcParams["figure.subplot.right"] = 0.85
matplotlib.rcParams["font.size"] = 14

# Make sure matplotlib doesn't try to use X11 if we're running
# in non-interactive mode.
if args.m is not None:
  matplotlib.use('Agg')

import matplotlib.pyplot as plt

# Fixed random number seed to make results reproducible.
numpy.random.seed(42)

# Build main parameter vector and metadata vectors.
parm = numpy.zeros(eb.NPAR+6, dtype=numpy.double)
parm_names = list(eb.parnames)
parm_texsym = list(eb.partexsym)
parm_units = list(eb.parunits)

PAR_GAMMA = eb.NPAR
parm_names.append("gamma")
parm_texsym.append("\\gamma")
parm_units.append("km/s")

PAR_DRIFT = eb.NPAR+1
parm_names.append("gamma_dot")
parm_texsym.append("\\dot{\\gamma}")
parm_units.append("km/s/day")

PAR_DQUAD = eb.NPAR+2
parm_names.append("gamma_dotdot")
parm_texsym.append("\\ddot{\\gamma}")
parm_units.append("km/s/day/day")

PAR_K1 = eb.NPAR+3
parm_names.append("K1")
parm_texsym.append("K")
parm_units.append("km/s")

PAR_S = eb.NPAR+4
parm_names.append("sigma")
parm_texsym.append("\\sigma")
parm_units.append("km/s")

PAR_M1 = eb.NPAR+5
parm_names.append("M_1")
parm_texsym.append("M_1")
parm_units.append("Msol")

parm_units[eb.PAR_T0] = "BJD"

name2iparm = {}

for iparm, name in enumerate(parm_names):
  name2iparm[name] = iparm

# Derived parameters.
dernames = ["e", "omega", "Tperi", "a1 sin i", "f1(M)", "q (sin i = 1)", "a (sin i = 1)", "M_2 (sin i = 1)", "M_2 (sin i = 1)"]
dertexsym = ["e", "\\omega", "T_{\\rm peri}", "a_1 \\sin i", "f_1(M)", "q_{\\rm min}", "a_{\\rm min}", "M_{2,{\\rm min}}", "M_{2,{\\rm min}}"]
derunits = ["", "deg", "BJD", "AU", "Msol", "", "AU", "Msol", "MJup"]

nder = len(dernames)

# Initialize a couple of parameters we don't use to sensible values
# to avoid floating point exceptions in the model calculation.
parm[eb.PAR_RASUM] =   0.001  # dummy value
parm[eb.PAR_RR]    =   0.001  # dummy value

# Supply a default for error scaling parameter.
parm[PAR_S]        =   0.05   # km/s

# Sampling to use for integration over exposure time.  Needs to be odd.
NSAMP = 29

# Load data.  Allows both possible forms (with or without filename).
if args.double:
  names = [ "bjd", "v1", "v2", "h" ]
  if args.t:
    names.append("texp")
  dtypes = [ "f8" ] * len(names)

  vels = numpy.genfromtxt(args.vels,
                          dtype={"names": names,
                                 "formats": dtypes },
                          loose=False)

  v2 = vels["v2"]
else:
  names = [ "bjd", "v1", "h" ]
  if args.t:
    names.append("texp")
  dtypes = [ "f8" ] * len(names)

  try:
    vels = numpy.genfromtxt(args.vels,
                            dtype={"names": names,
                                   "formats": dtypes },
                            loose=False)
  except:
    names.insert(0, "filename")
    dtypes.insert(0, "a")

    vels = numpy.genfromtxt(args.vels,
                            dtype={"names": names,
                                   "formats": dtypes },
                            loose=False)

  v2 = None

tbase = math.floor(vels["bjd"][0])

bjd = vels["bjd"] - tbase
v1 = vels["v1"]

if args.e:
  e_v1 = vels["h"]
else:
  hh = vels["h"]

if args.t:
  texp = vels["texp"]

nobs = len(bjd)

# Bring in fit parameters.
plist = []
plist_names = []
plist_texsym = []
plist_units = []
fixed = []

t0_gauss_mean = None
t0_gauss_sig = None
p_gauss_mean = None
p_gauss_sig = None
m1_gauss_mean = None
m1_gauss_sig = None

with open(args.pset, "r") as fp:
  for line in fp:
    # Remove comments and trim white space.
    ll = line.split("#", 2)
    ls = ll[0].strip()

    # Now split into fields.
    ll = ls.split()
    if len(ll) < 3:
      print >>sys.stderr, "could not understand:", line
      sys.exit(1)

    name = ll[0]
    value = float(ll[1])
    vary = int(ll[2])

    if len(ll) > 3:
      sigma = float(ll[3])
    else:
      sigma = None

    if name in name2iparm:
      iparm = name2iparm[name]

      # Set value.
      if iparm == eb.PAR_T0:
        parm[iparm] = value - tbase
      else:
        parm[iparm] = value

      # Special cases to impose ephemeris.
      if sigma is not None:
        if iparm == eb.PAR_T0:
          t0_gauss_mean = value - tbase
          t0_gauss_sig = sigma
        elif iparm == eb.PAR_P:
          p_gauss_mean = value
          p_gauss_sig = sigma

      # Primary mass is a special case.
      if iparm == PAR_M1:
        m1_gauss_mean = value
        m1_gauss_sig = sigma

      # Add to parameter list if we're varying.
      if vary > 0:
        plist.append(iparm)
        plist_names.append(name)
        plist_texsym.append(parm_texsym[iparm])
        plist_units.append(parm_units[iparm])

        if vary == 1:  # 1=in LM and MC, 2=in MC only
          fixed.append(False)
        elif vary == 2:
          fixed.append(True)
        else:
          print >>sys.stderr, "unknown vary value:", vary
          sys.exit(1)
    else:
      print >>sys.stderr, "unknown parameter:", name
      sys.exit(1)

# Convert these to numpy arrays.
plist = numpy.array(plist, dtype=numpy.int)
fixed = numpy.array(fixed, dtype=numpy.bool)

# Store this for later.
if args.e:
  errguess = numpy.median(e_v1)
  print "Using errguess =", errguess, "modified Jeffreys soften", 0.1*errguess
else:
  errguess = parm[PAR_S]

# Format arrays for fitting.
bjdfit = bjd
vfit = v1

if args.e:
  e_vfit = numpy.hypot(parm[PAR_S], e_v1)
else:
  e_vfit = parm[PAR_S] / hh

typ = numpy.empty_like(vfit, dtype=numpy.uint8)
typ[:] = eb.OBS_VRAD1

if args.t:
  # Sampling points.
  isamp = numpy.arange(NSAMP)
  dtwin = 1.0 / 86400.0
  dt1 = -0.5 * dtwin
  dtsamp = dtwin / NSAMP
  dt = dt1 + dtsamp * (isamp + 0.5)

  # Matrix of deltas.
  alldt = numpy.outer(dt, texp)

  # Matrix of timestamps to evaluate model at, using broadcasting.
  bjdtmp = bjd + alldt

  # The corresponding matrix of "typ" values.
  typtmp = numpy.empty_like(bjdtmp, dtype=numpy.uint8)
  typtmp[:] = eb.OBS_VRAD1

# L-M objective function.
def fit_func (trial, ymod):
  ourparm = numpy.copy(parm)
  ourparm[plist] = trial

  if args.t:
    ytmp = eb.model(ourparm, bjdtmp, typtmp, 0)
    ymod[:] = numpy.mean(ytmp, axis=0)
  else:
    eb.model(ourparm, bjdfit, typ, 0, out=ymod)

  ymod *= ourparm[PAR_K1]
  ymod += ourparm[PAR_GAMMA] + ourparm[PAR_DRIFT]*(bjdfit-ourparm[eb.PAR_T0]) + ourparm[PAR_DQUAD]*(bjdfit-ourparm[eb.PAR_T0])**2

def vecok (ourparm):
  ecc = math.hypot(ourparm[eb.PAR_ECOSW], ourparm[eb.PAR_ESINW])
  return(ecc < 1.0 and
         ((args.e and ourparm[PAR_S] >= 0) or
          (not args.e and ourparm[PAR_S] > 0)))

# Function returning log of posterior probability for MCMC.
def logpost (trial, x, y, yerr):
  # Parameter vector.
  ourparm = numpy.copy(parm)
  ourparm[plist] = trial

  # Check ranges.
  if not vecok(ourparm):
#    print "not vecok for", ourparm
    return -numpy.inf

  # Likelihood.
  if args.t:
    ytmp = eb.model(ourparm, bjdtmp, typtmp, 0)
    ymod = numpy.mean(ytmp, axis=0)
  else:
    ymod = eb.model(ourparm, x, typ, 0)

  ymod *= ourparm[PAR_K1]
  ymod += ourparm[PAR_GAMMA] + ourparm[PAR_DRIFT]*(x-ourparm[eb.PAR_T0]) + ourparm[PAR_DQUAD]*(x-ourparm[eb.PAR_T0])**2
  
  if args.e:
    wt = 1.0 / (ourparm[PAR_S]**2 + e_v1**2)
  else:
    wt = (hh / ourparm[PAR_S])**2

  loglike = -0.5*(numpy.sum(wt*(y-ymod)**2 - numpy.log(wt)))

  # Prior: Modified Jeffreys on error scale parameter.
  logprior = numpy.log(ourparm[PAR_S] + 0.1*errguess)

  # Gaussian on primary mass.
  if t0_gauss_sig is not None:
    logprior += 0.5 * ((ourparm[eb.PAR_T0] - t0_gauss_mean) / t0_gauss_sig)**2
  if p_gauss_sig is not None:
    logprior += 0.5 * ((ourparm[eb.PAR_P] - p_gauss_mean) / p_gauss_sig)**2
  if m1_gauss_sig is not None:
    logprior += 0.5 * ((ourparm[PAR_M1] - m1_gauss_mean) / m1_gauss_sig)**2

  # Convert to uniform prior in eccentricity.
  ecc = numpy.hypot(ourparm[eb.PAR_ECOSW], ourparm[eb.PAR_ESINW])
  if ecc > 0:
    logprior += numpy.log(ecc)

  return loglike - logprior

def plot_chain(samp, outfile):
  fig = plt.figure(figsize=figsize)

  for idim in range(ndim):
    plt.subplot(ndim, 1, idim+1)

    for iwalk in range(nwalk):
      plt.plot(samp.chain[iwalk,:,idim])

    plt.ylabel(plist_names[idim])

  fig.savefig(outfile)

ndim = len(plist)

vfinal, verr, chisq, ndof = nlfit(fit_func, parm[plist], fixed, vfit, e_vfit)

parm[plist] = vfinal

# Fit parameters.
print "L-M parameters:"

for iparm in range(ndim):
  value = vfinal[iparm]

  if plist[iparm] == eb.PAR_T0:
    value += tbase

  print "{0:<16} {1:14.6f} +/- {2:8.6f} {3}".format(plist_names[iparm],
                                                    value,
                                                    verr[iparm],
                                                    plist_units[iparm])

print 'chi squared =', chisq, 'ndof =', ndof

if args.m is not None:
  # Init MC
  if args.w is not None:
    nwalk = args.w
  else:
    nwalk = 100

  samp = emcee.EnsembleSampler(nwalk, ndim, logpost, args=(bjdfit, vfit, e_vfit))

  cent = numpy.copy(vfinal)
  pert = 3*numpy.copy(verr)

  for iparm in range(ndim):
    jparm = plist[iparm]

    if fixed[iparm]:
      if jparm == PAR_GAMMA or jparm == PAR_K1:
        pert[iparm] = 1.0
      elif jparm == eb.PAR_T0 and t0_gauss_sig is not None:  # as prior
        pert[iparm] = 3.0 * t0_gauss_sig
      elif jparm == eb.PAR_P and p_gauss_sig is not None:
        pert[iparm] = 3.0 * p_gauss_sig
      elif jparm == PAR_M1:
        pert[iparm] = 3.0 * m1_gauss_sig
      elif jparm == PAR_S:
        pert[iparm] = 0.1 * errguess
      else:
        pert[iparm] = 0.01

  pos = [None]*nwalk

  for iwalk in range(nwalk):
    trial = None

    for isim in range(100):
      trial = cent + pert * numpy.random.randn(ndim)

      trialparm = numpy.copy(parm)
      trialparm[plist] = trial

      isok = vecok(trialparm)
      if isok:
        break
      
    if not isok:
      raise RuntimeError("couldn't find valid starting point")

    pos[iwalk] = trial

  if args.n is not None:
    nsim = args.n
  else:
    nsim = 50000

  if args.b is not None:
    nburn = args.b
  else:
    nburn = nsim // 5
    if nburn < 1000:
      nburn = 1000

  print "MCMC using", nwalk, "walkers nburn =", nburn, "nsim =", nsim
  print "Will produce", nburn*nwalk, "burn-in and", nsim*nwalk, "final samples"

  pos, prob, state = samp.run_mcmc(pos, nburn,
                                   rstate0=numpy.random.get_state())

  plot_chain(samp, args.m + "_burn.png")

  samp.reset()

  pos, prob, state = samp.run_mcmc(pos, nsim)

  plot_chain(samp, args.m + "_chains.png")

  print "Acceptance fraction:", samp.acceptance_fraction

  try:
    print "Autocorrelation lengths:", samp.acor
  except:
    pass

  ch = samp.flatchain

  numpy.savez(args.m,
              parm=parm,
              parm_names=parm_names,
              parm_texsym=parm_texsym,
              parm_units=parm_units,
              plist=plist,
              plist_names=plist_names,
              plist_texsym=plist_texsym,
              plist_units=plist_units,
              fixed=fixed,
              tbase=tbase,
              nwalk=nwalk,
              nburn=nburn,
              nsim=nsim,
              ch=ch)

  lfp = open(args.m + "_orbit.txt", "w")
  tfp = open(args.m + "_orbit.tex", "w")

  print >>lfp, "MC parameters:"
  print "MC parameters:"

  print >>tfp, "\\hline"
  print >>tfp, "MCMC parameters\\\\"
  print >>tfp, "\\hline"

  vmed = numpy.empty([ndim])
  vad = numpy.empty([ndim])
  vndp = numpy.empty([ndim], dtype=numpy.int)

  ecc_kh_ndp = None

  for iparm in range(ndim):
    vec = ch[:,iparm]

    med = numpy.median(vec)
    ad = numpy.absolute(vec-med)

    err = numpy.percentile(ad, 68.3)

    ndp = fussyastronomer.ndp(err)

    vmed[iparm] = med
    vad[iparm] = err
    vndp[iparm] = ndp

    if plist[iparm] == eb.PAR_T0:
      med += tbase

    line = "{0:<16} {1:14.6f} +/- {2:8.6f} {3}".format(plist_names[iparm],
                                                       med,
                                                       err,
                                                       plist_units[iparm])

    print >>lfp, line
    print line

    # Special cases of n(dp) we want to be the same.
    if plist[iparm] == eb.PAR_ECOSW or plist[iparm] == eb.PAR_ESINW:
      if ecc_kh_ndp is None or ndp > ecc_kh_ndp:
        ecc_kh_ndp = ndp

  # TeX output.
  for iparm in range(ndim):
    if plist[iparm] == PAR_M1:
      continue

    med = vmed[iparm]
    err = vad[iparm]

    if plist[iparm] == eb.PAR_T0:
      med += tbase

    if plist[iparm] == eb.PAR_ECOSW or plist[iparm] == eb.PAR_ESINW:
      ndp = ecc_kh_ndp
    else:
      ndp = vndp[iparm]

    parstr = "$" + plist_texsym[iparm] + "$"
    if plist_units[iparm] != "":
      utex = plist_units[iparm]

      if utex == "Msol":
        utex = "${\\rm M}_\\odot$"

      parstr += " (" + utex + ")"

    texline = "{0:<36} & ${1:s} \\pm {2:s}$ \\\\".format(parstr,
                                                         fussyastronomer.format(med, ndp),
                                                         fussyastronomer.format(err, ndp))

    print >>tfp, texline

  # Argument and phase of periastron need special treatment.
  parm[plist] = vmed

  theomega = math.degrees(math.atan2(parm[eb.PAR_ESINW], parm[eb.PAR_ECOSW]))
  if theomega < 0.0:  # wrap to conventional range [0,360)
    theomega += 360.0

  thephiperi = eb.phiperi(parm)

  # Derived parameters.
  nsamp = ch.shape[0]

  vder = numpy.empty([nsamp, nder])
  mkvec = numpy.empty([nsamp])

  for isamp in range(nsamp):
    thissamp = ch[isamp]
    parm[plist] = thissamp

    esinw = parm[eb.PAR_ESINW]
    ecosw = parm[eb.PAR_ECOSW]

    m1 = parm[PAR_M1]

    ecc = math.hypot(esinw, ecosw)
    argper = math.degrees(math.atan2(esinw, ecosw))
    if argper < 0.0:  # wrap to conventional range [0,360)
      argper += 360.0

    # Force correct revolution for omega by wrapping delta into (-pi,pi].
    domega = argper - theomega
    n = round(domega / 360.0)
    argper = theomega + domega - n * 360.0

    # Same for phiperi.
    phiperi = eb.phiperi(parm)

    dphi = phiperi - thephiperi
    n = round(dphi)
    phiperi = thephiperi + dphi - n

    tperi = parm[eb.PAR_T0] + parm[eb.PAR_P] * phiperi

    # a1 sin i
    a1sini = semmaj1(parm[eb.PAR_ESINW], parm[eb.PAR_ECOSW],
                     parm[eb.PAR_P],
                     parm[PAR_K1])

    # Mass function.
    f1 = massfunc(parm[eb.PAR_ESINW], parm[eb.PAR_ECOSW],
                  parm[eb.PAR_P],
                  parm[PAR_K1])

    # Solve for mass ratio, secondary mass and semimajor axis.
    omega = eb.TWOPI / (parm[eb.PAR_P] * eb.DAY)

    q = qfromsb1(parm[eb.PAR_ESINW], parm[eb.PAR_ECOSW],
                 parm[eb.PAR_P],
                 parm[PAR_K1],
                 m1,
                 1.0)

    semmaj = (eb.GMSUN * m1 * (1.0 + q) / (omega*omega))**(1.0/3.0)

    m2 = m1 * q

    vder[isamp,:] = [ecc, argper, tperi, a1sini, f1, q, semmaj/eb.AU, m2, m2*eb.GMSUN/eb.GMJUP]

  numpy.savez(args.m + "_der",
              dernames=dernames,
              dertexsym=dertexsym,
              derunits=derunits,
              tbase=tbase,
              nwalk=nwalk,
              nburn=nburn,
              nsim=nsim,
              vder=vder)

  print >>lfp, "Derived parameters:"
  print "Derived parameters:"

  print >>tfp, "\\hline"
  print >>tfp, "Derived parameters\\\\"
  print >>tfp, "\\hline"

  for ipar, name in enumerate(dernames):
    unit = derunits[ipar]

    vec = vder[:,ipar]

    med = numpy.median(vec)
    ad = numpy.absolute(vec-med)

    err = numpy.percentile(ad, 68.3)

    if name == "Tperi":
      med += tbase

    line = "{0:<18} {1:13.7f} +/- {2:9.7f} {3}".format(name, med, err, unit)

    if name == "e" and med < 5*err:
      # Also give upper limit.
      ul = numpy.percentile(vec, 95.0)
      line += " (95% CL < {0:.7f})".format(ul)

    print >>lfp, line
    print line

    ndp = fussyastronomer.ndp(err)

    parstr = "$" + dertexsym[ipar] + "$"
    if unit != "":
      utex = unit

      if utex == "Msol":
        utex = "${\\rm M}_\\odot$"

      parstr += " (" + utex + ")"

    texline = "{0:<36} & ${1:s} \\pm {2:s}$ \\\\".format(parstr,
                                                         fussyastronomer.format(med, ndp),
                                                         fussyastronomer.format(err, ndp))

    print >>tfp, texline

  # Update parameters.
  parm[plist] = vmed
  vfinal = vmed
  verr = vad

  ndof = vfit.size - vmed.size

  if not args.e:
    print >>lfp, "Median rms =", numpy.median(parm[PAR_S]/hh), "km/s"
    print "Median rms =", numpy.median(parm[PAR_S]/hh), "km/s"

  lfp.close()
  tfp.close()

else:
  # Derived parameters for L-M model.
  esinw = parm[eb.PAR_ESINW]
  ecosw = parm[eb.PAR_ECOSW]

  m1 = parm[PAR_M1]

  ecc = math.hypot(esinw, ecosw)
  argper = math.degrees(math.atan2(esinw, ecosw))
  if argper < 0.0:  # wrap to conventional range [0,360)
    argper += 360.0

  phiperi = eb.phiperi(parm)

  tperi = parm[eb.PAR_T0] + parm[eb.PAR_P] * phiperi

  # a1 sin i
  a1sini = semmaj1(parm[eb.PAR_ESINW], parm[eb.PAR_ECOSW],
                   parm[eb.PAR_P],
                   parm[PAR_K1])

  # Mass function.
  f1 = massfunc(parm[eb.PAR_ESINW], parm[eb.PAR_ECOSW],
                parm[eb.PAR_P],
                parm[PAR_K1])

  # Solve for mass ratio, secondary mass and semimajor axis.
  omega = eb.TWOPI / (parm[eb.PAR_P] * eb.DAY)
  
  q = qfromsb1(parm[eb.PAR_ESINW], parm[eb.PAR_ECOSW],
               parm[eb.PAR_P],
               parm[PAR_K1],
               m1,
               1.0)
  
  semmaj = (eb.GMSUN * m1 * (1.0 + q) / (omega*omega))**(1.0/3.0)
  
  m2 = m1 * q
  
  # Make vector.
  vder = numpy.array([ecc, argper, tperi, a1sini, f1, q, semmaj/eb.AU, m2, m2*eb.GMSUN/eb.GMJUP])

  print "Derived parameters:"

  for ipar, name in enumerate(dernames):
    unit = derunits[ipar]

    val = vder[ipar]

    if name == "Tperi":
      val += tbase

    line = "{0:<18} {1:13.7f} {2}".format(name, val, unit)

    print line

# Phases of observations.
tmp = (bjdfit - parm[eb.PAR_T0]) / parm[eb.PAR_P]
tmporig = (bjd - parm[eb.PAR_T0]) / parm[eb.PAR_P]

if args.u:
  phi = tmp
  phiorig = tmporig

  phimin = numpy.min(phi)
  phimax = numpy.max(phi)
  
  phimin -= 0.05*(phimax-phimin)
  phimax += 0.05*(phimax-phimin)

else:
  phi = tmp - numpy.floor(tmp)
  phiorig = tmporig - numpy.floor(tmporig)

  phimin = 0.0
  phimax = 1.0

# Plot.
phiplot = numpy.linspace(phimin, phimax, 1000)
typplot = numpy.empty_like(phiplot, dtype=numpy.uint8)

if args.e:
  e_vfit = numpy.hypot(parm[PAR_S], e_v1)
else:
  e_vfit = parm[PAR_S] / hh

typplot.fill(eb.OBS_VRAD1)
yplot1 = eb.model(parm, phiplot, typplot, eb.FLAG_PHI)
yplot1 = parm[PAR_GAMMA] + yplot1 * parm[PAR_K1]
if args.u:
  yplot1 += parm[PAR_DRIFT] * phiplot*parm[eb.PAR_P] + parm[PAR_DQUAD] * (phiplot*parm[eb.PAR_P])**2

fig = plt.figure(figsize=figsize)

plt.subplot(2, 1, 1)

plt.plot(phiplot, yplot1, color="blue")

if args.double:
  drift = 0
  for ipar, jpar in enumerate(plist):
    if jpar == PAR_DRIFT:
      if drift < 1:
        drift = 1
    if jpar == PAR_DQUAD:
      if drift < 2:
        drift = 2

  if drift > 0:
    coef = numpy.polynomial.polynomial.polyfit(bjd-parm[eb.PAR_T0], v2, drift, full=False, w=hh*hh)
    mod2 = numpy.polynomial.polynomial.polyval(bjd-parm[eb.PAR_T0], coef)
    mean2 = coef[0]
  else:
    mean2 = numpy.average(v2, weights=hh*hh)
    mod2 = mean2

  resid2 = v2 - mod2
  if args.e:
    print "Don't know how we got here"
    sys.exit(1)
  else:
    tmp = resid2 * hh
    chisq = numpy.sum(tmp*tmp)
    err2 = math.sqrt(chisq / (hh.size-(drift+1)))

  if drift > 0:
    sgn1 = "+"
    if coef[1] < 0:
      sgn1 = "-"

    if drift > 1:
      sgn2 = "+"
      if coef[2] < 0:
        sgn2 = "-"

      print "gamma2 =", coef[0], "km/s", sgn1, abs(coef[1]), "km/s/day", sgn2, abs(coef[2]), "km/s/day/day"
    else:
      print "gamma2 =", coef[0], "km/s", sgn1, abs(coef[1]), "km/s/day"
  else:
    print "gamma2 =", mean2, "km/s"

  print "sigma2 =", err2, "km/s"

  if args.u and drift > 0:
    dbjdmin = phimin * parm[eb.PAR_P]
    dbjdmax = phimax * parm[eb.PAR_P]

    xxplot = numpy.linspace(phimin, phimax, 1000)
    yyplot = numpy.polynomial.polynomial.polyval(xxplot * parm[eb.PAR_P], coef)

    plt.plot(xxplot, yyplot, color="green")
  else:
    plt.axhline(mean2, color="green")

if args.u:
  plt.errorbar(phi, vfit, yerr=e_vfit, fmt="o", color="blue")
else:
  plt.errorbar(phi, vfit-parm[PAR_DRIFT]*(bjd-parm[eb.PAR_T0])-parm[PAR_DQUAD]*(bjd-parm[eb.PAR_T0])**2, yerr=e_vfit, fmt="o", color="blue")

if args.double:
  if args.u:
    plt.errorbar(phiorig, v2, yerr=err2, fmt="o", color="green")
  else:
    plt.errorbar(phiorig, v2-mod2+mean2, yerr=err2, fmt="o", color="green")

plt.xlim(phimin, phimax)

plt.ylabel("Vrad (km/s)")

plt.subplot(2, 1, 2)

ymod = numpy.empty_like(vfit)
fit_func(vfinal, ymod)

resid = vfit-ymod

print "RMS of residuals =", numpy.sqrt(numpy.sum(resid**2) / ndof)

chisq = numpy.sum((resid / e_vfit)**2)

print "Final chi squared =", chisq, "ndof =", ndof

plt.errorbar(phi, resid, yerr=e_vfit, fmt="o", color="blue")
plt.axhline(0, color="blue")

if args.double:
  rmin1 = numpy.min(resid-e_vfit)
  rmax2 = numpy.max(resid2+err2)
  roff2 = 1.1*(rmin1 - rmax2)

  plt.errorbar(phiorig, roff2+resid2, yerr=err2, fmt="o", color="green")
  plt.axhline(roff2, color="green")

plt.xlim(phimin, phimax)

plt.xlabel("Phase")

if args.double:
  plt.ylabel("Residual + const (km/s)")
else:
  plt.ylabel("Residual (km/s)")

#plt.tight_layout()

if args.m is None:
  plt.show()
else:
  fig.savefig(args.m + "_orbit.pdf")
  fig.savefig(args.m + "_orbit.eps")
  plt.close()
